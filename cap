from __future__ import division
import opencv.adaptors
import PIL.Image
import time, pygame

import sys, os
sys.path.append("/my/proj/cuisine/build/lib.linux-i686-2.4")
from cuisine.libdv import Decoder, decodedframesize
from cuisine.pour.deck import Dv1394device
from cuisine import pyxbuf

# Parameters for haar detection
# From the API:
# The default parameters (scale_factor=1.1, min_neighbors=3, flags=0) are tuned 
# for accurate yet slow object detection. For a faster operation on real video 
# images the settings are: 
# scale_factor=1.2, min_neighbors=2, flags=CV_HAAR_DO_CANNY_PRUNING, 
# min_size=<minimum possible face size
min_size = opencv.cvSize(20*3,20*3)
image_scale = 1.3
haar_scale = 1.2
min_neighbors = 2
haar_flags = 0

def face(storage, cascade, img, surf):
    gray = opencv.cvCreateImage( opencv.cvSize(img.width,img.height), 8, 1 );
    small_img = opencv.cvCreateImage(opencv.cvSize(
        opencv.cvRound(img.width/image_scale),
        opencv.cvRound (img.height/image_scale)), 8, 1 )
    opencv.cvCvtColor( img, gray, opencv.CV_BGR2GRAY )
    opencv.cvResize( gray, small_img, opencv.CV_INTER_LINEAR );

    opencv.cvEqualizeHist( small_img, small_img )
    
    opencv.cvClearMemStorage( storage )

    t = opencv.cvGetTickCount();
    faces = opencv.cvHaarDetectObjects(small_img, cascade, storage,
                                       haar_scale, min_neighbors,
                                       haar_flags, min_size )
    t = opencv.cvGetTickCount() - t;
    print "detection time = %gms" % (t/(opencv.cvGetTickFrequency()*1000.));

    for r in faces:
        print "found"
        pygame.draw.ellipse(surf, (255,255,0),
                         (int(r.x*image_scale), int(r.y*image_scale),
                          int(r.width*image_scale), r.height*image_scale),
                            3)




dv = os.open('/dev/dv1394/0', os.O_RDONLY | os.O_NONBLOCK)

pixels = pyxbuf.getbuffer(decodedframesize('rgb'))

dec = Decoder(0, 1, 1)
dec.quality = 4

screen = pygame.display.set_mode((720, 480))



# the OpenCV API says this function is obsolete, but we can't
# cast the output of cvLoad to a HaarClassifierCascade, so use this anyways
# the size parameter is ignored
cascade_name = "/my/proj/headtrack/opencv-1.0.0/data/haarcascades/haarcascade_frontalface_alt.xml"
cascade = opencv.cvLoadHaarClassifierCascade( cascade_name, opencv.cvSize(1,1) )
storage = opencv.cvCreateMemStorage(0)


while 1:
    try:
        frame = os.read(dv, 120000)
    except (OSError, IOError), e:
        time.sleep(.01)
        continue
    dec.parseheader(frame)
    dec.decodeframe('rgb', frame, pixels)

    pilFrame = PIL.Image.fromstring("RGB", (720,480), str(pixels))
    ipl = opencv.adaptors.PIL2Ipl(pilFrame)

    
    surf = pygame.image.fromstring(str(pixels), (720, 480), "RGB")
    screen.blit(surf, (0,0))

    face(storage, cascade, ipl, screen)


    pygame.display.update()
    time.sleep(1/30)
